// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockitem creates a new instance of Mockitem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockitem(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockitem {
	mock := &Mockitem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockitem is an autogenerated mock type for the item type
type Mockitem struct {
	mock.Mock
}

type Mockitem_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockitem) EXPECT() *Mockitem_Expecter {
	return &Mockitem_Expecter{mock: &_m.Mock}
}

// Level provides a mock function for the type Mockitem
func (_mock *Mockitem) Level() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Mockitem_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type Mockitem_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *Mockitem_Expecter) Level() *Mockitem_Level_Call {
	return &Mockitem_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *Mockitem_Level_Call) Run(run func()) *Mockitem_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockitem_Level_Call) Return(n int) *Mockitem_Level_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Mockitem_Level_Call) RunAndReturn(run func() int) *Mockitem_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Mockitem
func (_mock *Mockitem) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Mockitem_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Mockitem_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Mockitem_Expecter) Name() *Mockitem_Name_Call {
	return &Mockitem_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Mockitem_Name_Call) Run(run func()) *Mockitem_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockitem_Name_Call) Return(s string) *Mockitem_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Mockitem_Name_Call) RunAndReturn(run func() string) *Mockitem_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function for the type Mockitem
func (_mock *Mockitem) Use() {
	_mock.Called()
	return
}

// Mockitem_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type Mockitem_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
func (_e *Mockitem_Expecter) Use() *Mockitem_Use_Call {
	return &Mockitem_Use_Call{Call: _e.mock.On("Use")}
}

func (_c *Mockitem_Use_Call) Run(run func()) *Mockitem_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockitem_Use_Call) Return() *Mockitem_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockitem_Use_Call) RunAndReturn(run func()) *Mockitem_Use_Call {
	_c.Run(run)
	return _c
}
